#!/usr/bin/env ruby
require 'rubygems'
require 'thread'
require 'irb'
require 'pp'
require 'dci/proxy'

CFG_FILENAME = 'etc/config.yaml'
fail "#{CFG_FILENAME} missing" unless File.exists? CFG_FILENAME
CFG = YAML.load_file CFG_FILENAME

module DCI::Proxy

BASE_URL = "http://#{CFG['http_address']}:#{CFG['http_port']}"

class Server
	include DCI::Proxy::Console

	def start
		$logger = Logger.new(CFG['main_log_filename'], CFG['log_rotation'])
		$chat_logger = Logger.new(CFG['chat_log_filename'], CFG['log_rotation'])
		$search_logger = YamlLogger.new(CFG['search_log_filename'])
		$client_logger = YamlLogger.new(CFG['client_log_filename'])
		$index = DCI::Index.new CFG['index_filename']
		$hub = DCI::Proxy::HubConnection.new 'hub', CFG['dc_username'], CFG['hub_address'], CFG['hub_port'], CFG['ctm_address']
		$http = DCI::Proxy::HttpServer.new('0.0.0.0', CFG['http_port'])
		$downloader = DCI::Proxy::Downloader.new

		Thread.new do
			$hub.run
			log.fatal "hub thread terminated"
		end

		Thread.new do
			$http.run
			log.fatal "http thread terminated"
		end

		Thread.new do
			$downloader.run
			log.fatal "downloader thread terminated"
		end

		$bot = DCI::Proxy::JabberBot.new CFG['jabber_username'], CFG['jabber_password']
	end
end

$server = Server.new
$server.start

IRB.setup nil
irb = IRB::Irb.new(IRB::WorkSpace.new($server))
IRB.conf[:MAIN_CONTEXT] = irb.context
trap('SIGINT') { irb.signal_handle }
catch(:IRB_EXIT) { irb.eval_input }

end
