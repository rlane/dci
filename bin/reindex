#!/usr/bin/env ruby
require 'rubygems'
require 'libxml'
require 'net/http'
require 'cgi'
require 'fileutils'
require 'dci'
require 'xapian'
include LibXML

SERVER_ADDRESS = ARGV[0] || "localhost"
SERVER_PORT = 8314
BASE_URL = "http://#{SERVER_ADDRESS}:#{SERVER_PORT}"
BLACKLIST = (File.open("var/blacklist").readlines rescue []).map { |l| l.chomp }
FILELISTS_DIR = "var/filelists"
DATA_FILENAME = "var/data"
ANALYZED_DATA_FILENAME = "var/data.analyzed"
INDEX_FILENAME = "var/index"
EXPIRE_SECS = 3600 * 24
OPTIMIZE = false
LIMIT = 20

R = XML::Reader

def get_raw(url)
	r = Net::HTTP.get_response(URI.parse(url))
	if r.is_a? Net::HTTPSuccess
		r.body
	else
		raise r.message
	end
end

def get_filelists
	usernames = get_raw(BASE_URL + "/users").split

	usernames.each do |username|
		filename = FILELISTS_DIR + "/#{username.gsub '/', '_'}.filelist.xml"
		next if File.exists?(filename) && (File.mtime(filename) > (Time.now - EXPIRE_SECS))
		next if BLACKLIST.member? username
		next if username == ''
		next if username.index('~') == 0
		next if username.index('*') == 0
		puts "downloading filelist from #{username}"
		begin
			data = get_raw(BASE_URL + "/filelist?username=#{CGI.escape username}")
			fail 'empty file' if data.empty?
			File.open(filename, "w") { |f| f.puts data }
		rescue Exception => e
			puts "download failed: #{e.message}"
			BLACKLIST << username
			sleep 2
		end
	end

	File.open("var/blacklist", "w") { |f| BLACKLIST.each { |l| f.puts l } }
end

def merge
	filelists = Dir.glob(FILELISTS_DIR + "/*").take(LIMIT)

	def process_file tth, username, path, size
		x = $index[tth] || { :locations => [], :size => nil }
		x[:locations] << [username, path * '/']
		x[:size] = size
		$index[tth] = x
	end

	def process_filelist xml, username
		path = []
		while (ret = xml.read; (ret == 1) || (ret == true))
			name, node_type = xml.name, xml.node_type
			if name == 'File' && node_type == R::TYPE_ELEMENT
				path.push xml['Name']
				process_file xml['TTH'], username, path, xml['Size'].to_i
				path.pop
			elsif name == 'Directory' && node_type == R::TYPE_ELEMENT
				path.push xml['Name']
			elsif name == 'Directory' && node_type == R::TYPE_END_ELEMENT
				path.pop
			end
		end
	end

	begin
		$index = DCI::MarshalledDB.new DATA_FILENAME

		i = 0
		n = filelists.length
		filelists.each do |filelist|
			i += 1
			fail 'bad filename' unless filelist =~ /^#{FILELISTS_DIR}\/(.*).filelist.xml/
			username = $1
			begin
				File.open(filelist, "r") do |f|
					puts "(#{i}/#{n}) processing #{filelist}"
					xml = XML::Reader.io f
					next if xml.nil?
					process_filelist xml, username
				end
			rescue => e
				puts "exception: #{e.message}"
				FileUtils.rm filelist
			end
		end

		if OPTIMIZE
			puts "optimizing..."
			$index.optimize
		end
	ensure
		$index.close if $index
	end
end

def analyze
	in_index = out_index = nil
	begin
		in_index = DCI::MarshalledDB.new DATA_FILENAME
		out_index = DCI::MarshalledDB.new ANALYZED_DATA_FILENAME

		i = 0
		n = in_index.size
		in_index.each do |tth,v|
			i += 1
			run_heuristics tth, v
			out_index[tth] = v
			puts "analyzed #{i}/#{n}" if (i % 10000) == 0
		end

		if OPTIMIZE
			puts "optimizing..."
			out_index.optimize
		end
	ensure
		in_index.close if in_index
		out_index.close if out_index
	end
end

def index
	$db = Xapian::WritableDatabase.new(INDEX_FILENAME, Xapian::DB_CREATE_OR_OVERWRITE)
	$term_generator = Xapian::TermGenerator.new()
	$term_generator.stemmer = Xapian::Stem.new("english")

	def index tth, locations, texts, terms, size, mimetype
		doc = Xapian::Document.new
		doc.add_term DCI::Index.mkterm(:tth, tth)
		terms.each { |type,term| doc.add_term DCI::Index.mkterm(type,term) }
		usernames = locations.map { |x,_| x }.uniq
		usernames.each { |x| doc.add_term DCI::Index.mkterm(:username, x) }
		$term_generator.document = doc
		texts.each { |text| $term_generator.index_text text, 1, DCI::Index::PREFIXES[:text] }
		doc.add_value DCI::Index::SIZE_VALUENO, size.to_s
		#puts doc.terms.map { |t| t.term }.join(' ')
		doc.data = Marshal.dump({:tth => tth, :locations => locations, :size => size, :mimetype => mimetype})
		$db.add_document doc
	end

	data = DCI::MarshalledDB.new ANALYZED_DATA_FILENAME
	n = data.size
	i = 0
	data.each do |tth,v|
		#puts "indexing #{tth}"
		i += 1
		index tth, v[:locations], v[:texts], v[:terms], v[:size], v[:mimetype]
		puts "indexed #{i}/#{n}" if (i % 10000) == 0
	end
	data.close
end

get_filelists
merge
analyze
index
